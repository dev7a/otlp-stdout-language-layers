name: "Manual Layer Publish"

on:
  workflow_dispatch:
    inputs:
      language:
        description: 'Language layer to publish'
        required: true
        type: choice
        options:
          - python
          - nodejs
        default: python
      exporter-version:
        description: 'Version of otlp-stdout-span-exporter to use'
        required: false
        type: string
        default: latest
      aws-region:
        description: 'AWS Region(s) where layer will be published'
        required: true
        type: choice
        options:
          - all
          - ca-central-1
          - ca-west-1
          - eu-central-1
          - eu-central-2
          - eu-north-1
          - eu-south-1
          - eu-south-2
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - us-east-1
          - us-east-2
          - us-west-2
        default: us-east-1
      release-group:
        description: 'Release group name (e.g., beta, dev, prod, alpha)'
        required: true
        type: string
        default: beta
      upstream-branch:
        description: 'Upstream OpenTelemetry Lambda branch or tag to build from (e.g., main, v0.14.0, layer-python/0.14.0). Use v0.14.0 to auto-construct language-specific tags.'
        required: false
        type: string
        default: main

permissions:
  id-token: write
  contents: write

jobs:
  prepare-build-jobs:
    runs-on: ubuntu-latest
    outputs:
      build_jobs: ${{ steps.prepare-build-jobs.outputs.build_jobs }}
      regions: ${{ steps.prepare-regions.outputs.regions }}
    steps:
      - id: prepare-build-jobs
        name: Prepare Build Jobs
        run: |
          languages='["${{ github.event.inputs.language }}"]'
          echo "build_jobs={\"language\": ${languages}}" | tr -d '[:space:]' >> $GITHUB_OUTPUT

      - id: prepare-regions
        name: Prepare Regions
        run: |
          regions=''
          if [ "${{ github.event.inputs.aws-region }}" == 'all' ]; then
            regions='["ca-central-1", "ca-west-1", "eu-central-1", "eu-central-2", "eu-north-1", "eu-south-1", "eu-south-2", "eu-west-1", "eu-west-2", "eu-west-3", "us-east-1", "us-east-2", "us-west-2"]'
          else
            regions='["${{ github.event.inputs.aws-region }}"]'
          fi
          echo "regions={\"aws_region\": ${regions}}" | tr -d '[:space:]' >> $GITHUB_OUTPUT

  build-layers:
    needs: prepare-build-jobs
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.prepare-build-jobs.outputs.build_jobs) }}
    outputs:
      EXPORTER_VERSION: ${{ steps.save-exporter-version.outputs.EXPORTER_VERSION }}
      UPSTREAM_VERSION: ${{ steps.save-upstream-version.outputs.UPSTREAM_VERSION }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4 # v4.2.2

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Setup Node.js
        if: matrix.language == 'nodejs'
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Validate upstream tag vs language
        run: |
          UPSTREAM="${{ github.event.inputs.upstream-branch }}"
          LANGUAGE="${{ matrix.language }}"
          
          echo "Validating upstream tag '$UPSTREAM' against language '$LANGUAGE'"
          
          # Check for mismatched language-specific tags
          if [[ "$UPSTREAM" == layer-python/* && "$LANGUAGE" != "python" ]]; then
            echo "::error::Upstream tag '$UPSTREAM' is for Python but language is set to '$LANGUAGE'"
            exit 1
          fi
          
          if [[ "$UPSTREAM" == layer-nodejs/* && "$LANGUAGE" != "nodejs" ]]; then
            echo "::error::Upstream tag '$UPSTREAM' is for Node.js but language is set to '$LANGUAGE'"
            exit 1
          fi
          
          # Check for unrecognized layer-specific tags
          if [[ "$UPSTREAM" == layer-* && "$UPSTREAM" != layer-python/* && "$UPSTREAM" != layer-nodejs/* ]]; then
            echo "::error::Unrecognized upstream tag pattern '$UPSTREAM'. Expected: layer-python/* or layer-nodejs/*"
            exit 1
          fi
          
          # v-prefixed versions are valid for any language (we'll construct the right tag)
          if [[ "$UPSTREAM" == v* ]]; then
            echo "✅ Will construct language-specific tag from '$UPSTREAM' for '$LANGUAGE'"
          fi
          
          echo "✅ Validation passed: upstream tag and language are compatible"

      - name: Save versions
        id: save-versions
        run: |
          EXPORTER_VERSION="${{ github.event.inputs.exporter-version }}"
          UPSTREAM_VERSION="${{ github.event.inputs.upstream-branch }}"
          echo "EXPORTER_VERSION=$EXPORTER_VERSION" >> $GITHUB_OUTPUT
          echo "UPSTREAM_VERSION=$UPSTREAM_VERSION" >> $GITHUB_OUTPUT

      - name: Save Exporter Version
        id: save-exporter-version
        run: |
          echo "EXPORTER_VERSION=${{ steps.save-versions.outputs.EXPORTER_VERSION }}" >> $GITHUB_OUTPUT

      - name: Save Upstream Version
        id: save-upstream-version
        run: |
          UPSTREAM="${{ steps.save-versions.outputs.UPSTREAM_VERSION }}"
          LANGUAGE="${{ matrix.language }}"
          
          # If upstream starts with 'v', construct language-specific tag for consistency
          if [[ "$UPSTREAM" == v* ]]; then
            VERSION=${UPSTREAM#v}
            UPSTREAM_VERSION="layer-$LANGUAGE/$VERSION"
            echo "Constructed upstream version: $UPSTREAM_VERSION"
          else
            UPSTREAM_VERSION="$UPSTREAM"
            echo "Using upstream version as-is: $UPSTREAM_VERSION"
          fi
          
          echo "UPSTREAM_VERSION=$UPSTREAM_VERSION" >> $GITHUB_OUTPUT

      - name: Build Python Layer
        if: matrix.language == 'python'
        run: |
          UPSTREAM="${{ github.event.inputs.upstream-branch }}"
          
          # If upstream starts with 'v', construct language-specific tag
          if [[ "$UPSTREAM" == v* ]]; then
            VERSION=${UPSTREAM#v}
            UPSTREAM_TAG="layer-python/$VERSION"
            echo "Constructing Python-specific tag: $UPSTREAM_TAG"
          else
            UPSTREAM_TAG="$UPSTREAM"
            echo "Using upstream tag as-is: $UPSTREAM_TAG"
          fi
          
          export UPSTREAM_BRANCH="$UPSTREAM_TAG"
          export EXPORTER_VERSION="${{ github.event.inputs.exporter-version }}"
          
          make build-python-layer

      - name: Build Node.js Layer
        if: matrix.language == 'nodejs'
        run: |
          UPSTREAM="${{ github.event.inputs.upstream-branch }}"
          
          # If upstream starts with 'v', construct language-specific tag
          if [[ "$UPSTREAM" == v* ]]; then
            VERSION=${UPSTREAM#v}
            UPSTREAM_TAG="layer-nodejs/$VERSION"
            echo "Constructing Node.js-specific tag: $UPSTREAM_TAG"
          else
            UPSTREAM_TAG="$UPSTREAM"
            echo "Using upstream tag as-is: $UPSTREAM_TAG"
          fi
          
          export UPSTREAM_BRANCH="$UPSTREAM_TAG"
          export EXPORTER_VERSION="${{ github.event.inputs.exporter-version }}"
          
          make build-node-layer

      - name: Upload Python Layer Artifact
        if: matrix.language == 'python'
        uses: actions/upload-artifact@v4
        with:
          name: otlp-stdout-python-layer-manual.zip
          path: dist/otlp-stdout-python-*.zip

      - name: Upload Node.js Layer Artifact
        if: matrix.language == 'nodejs'
        uses: actions/upload-artifact@v4
        with:
          name: otlp-stdout-nodejs-layer-manual.zip
          path: dist/otlp-stdout-node-*.zip

  publish-python-layer:
    if: always() && github.event.inputs.language == 'python' && needs.build-layers.result == 'success'
    uses: ./.github/workflows/layer-publish.yml
    needs: [prepare-build-jobs, build-layers]
    strategy:
      matrix: ${{ fromJSON(needs.prepare-build-jobs.outputs.regions) }}
    with:
      artifact-name: otlp-stdout-python-layer-manual.zip
      layer-name: otlp-stdout-python
      component-version: ${{ needs.build-layers.outputs.EXPORTER_VERSION }}
      upstream-version: ${{ needs.build-layers.outputs.UPSTREAM_VERSION }}
      runtimes: python3.13
      release-group: ${{ github.event.inputs.release-group }}
      aws_region: ${{ matrix.aws_region }}
    secrets: inherit

  publish-nodejs-layer:
    if: always() && github.event.inputs.language == 'nodejs' && needs.build-layers.result == 'success'
    uses: ./.github/workflows/layer-publish.yml
    needs: [prepare-build-jobs, build-layers]
    strategy:
      matrix: ${{ fromJSON(needs.prepare-build-jobs.outputs.regions) }}
    with:
      artifact-name: otlp-stdout-nodejs-layer-manual.zip
      layer-name: otlp-stdout-nodejs
      component-version: ${{ needs.build-layers.outputs.EXPORTER_VERSION }}
      upstream-version: ${{ needs.build-layers.outputs.UPSTREAM_VERSION }}
      runtimes: nodejs22.x
      release-group: ${{ github.event.inputs.release-group }}
      aws_region: ${{ matrix.aws_region }}
    secrets: inherit

  create-release:
    if: |
      always() &&
      (startsWith(github.event.inputs.upstream-branch, 'v') || startsWith(github.event.inputs.upstream-branch, 'layer-')) &&
      needs.build-layers.result == 'success' &&
      (
        (github.event.inputs.language == 'python' && needs.publish-python-layer.result == 'success') ||
        (github.event.inputs.language == 'nodejs' && needs.publish-nodejs-layer.result == 'success')
      )
    runs-on: ubuntu-latest
    needs: [prepare-build-jobs, build-layers, publish-python-layer, publish-nodejs-layer]
    steps:
      - uses: actions/checkout@v4

      - name: Determine release tag
        id: release-tag
        run: |
          UPSTREAM="${{ github.event.inputs.upstream-branch }}"
          LANGUAGE="${{ github.event.inputs.language }}"
          RELEASE_GROUP="${{ github.event.inputs.release-group }}"
          
          if [[ "$UPSTREAM" == layer-* ]]; then
            # Extract version from existing layer tag (e.g., layer-python/0.14.0 -> 0.14.0)
            if [[ "$UPSTREAM" == layer-$LANGUAGE/* ]]; then
              VERSION=$(echo "$UPSTREAM" | sed -E "s|^layer-$LANGUAGE/||")
            else
              echo "::error::Upstream tag '$UPSTREAM' doesn't match language '$LANGUAGE'"
              exit 1
            fi
            BASE_TAG="layer-$LANGUAGE/$VERSION"
          elif [[ "$UPSTREAM" == v* ]]; then
            # Convert v0.14.0 to layer-python/0.14.0 or layer-nodejs/0.14.0
            VERSION=${UPSTREAM#v}
            BASE_TAG="layer-$LANGUAGE/$VERSION"
          else
            echo "::error::Upstream branch '$UPSTREAM' doesn't look like a release tag"
            exit 1
          fi
          
          # Append release group to the tag unless it's 'prod' (production releases get clean tags)
          if [[ "$RELEASE_GROUP" == "prod" ]]; then
            RELEASE_TAG="$BASE_TAG"
          else
            RELEASE_TAG="$BASE_TAG-$RELEASE_GROUP"
          fi
          
          echo "release-tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "Release tag will be: $RELEASE_TAG (upstream: $UPSTREAM, release-group: $RELEASE_GROUP)"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.OTEL_LAMBDA_LAYER_PUBLISH_ROLE_ARN }}
          role-duration-seconds: 1200
          aws-region: us-east-1
          mask-aws-account-id: false

      - name: Collect layer ARNs
        id: collect-arns
        run: |
          # Get the actual AWS account ID
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "Using AWS Account ID: $ACCOUNT_ID"
          
          # Create a summary of published layers
          echo "## Published Layer ARNs" > release_notes.md
          echo "" >> release_notes.md
          
          echo "### ${{ github.event.inputs.language }} Layer" >> release_notes.md
          echo "" >> release_notes.md
          
          # Construct the actual layer name as it was published
          LANGUAGE="${{ github.event.inputs.language }}"
          RELEASE_GROUP="${{ github.event.inputs.release-group }}"
          UPSTREAM_VERSION="${{ needs.build-layers.outputs.UPSTREAM_VERSION }}"
          
          # Clean up upstream version for layer naming (same logic as layer-publish.yml)
          UPSTREAM_VERSION_CLEANED=$(echo "$UPSTREAM_VERSION" | sed -E 's|^layer-[^/]+/||' | sed -r 's/[\.\/]/_/g')
          LAYER_NAME="otlp-stdout-$LANGUAGE-$RELEASE_GROUP-$UPSTREAM_VERSION_CLEANED"
          
          echo "Layer name: $LAYER_NAME"
          
          # Create table header
          echo "| Region | Layer ARN |" >> release_notes.md
          echo "|--------|-----------|" >> release_notes.md
          
          # Get the list of regions where the layer was published
          regions_json='${{ needs.prepare-build-jobs.outputs.regions }}'
          regions=($(echo "$regions_json" | jq -r '.aws_region[]'))
          
          # For each region, get the actual layer version and construct the ARN
          for region in "${regions[@]}"; do
            echo "Checking layer in region: $region"
            
            # Get the latest version number for this layer in this region
            LAYER_VERSION=$(aws lambda list-layer-versions \
              --layer-name "$LAYER_NAME" \
              --region "$region" \
              --query 'LayerVersions[0].Version' \
              --output text 2>/dev/null || echo "1")
            
            if [[ "$LAYER_VERSION" != "None" && "$LAYER_VERSION" != "" ]]; then
              LAYER_ARN="arn:aws:lambda:$region:$ACCOUNT_ID:layer:$LAYER_NAME:$LAYER_VERSION"
              echo "| $region | \`$LAYER_ARN\` |" >> release_notes.md
            else
              echo "| $region | ❌ Layer not found or failed to publish |" >> release_notes.md
            fi
          done
          
          echo "" >> release_notes.md
          echo "### Usage" >> release_notes.md
          echo "" >> release_notes.md
          
          if [[ "${{ github.event.inputs.language }}" == "python" ]]; then
            echo "Add this layer to your Lambda function and set:" >> release_notes.md
            echo "- \`AWS_LAMBDA_EXEC_WRAPPER=/opt/otel-instrument\`" >> release_notes.md
            echo "- \`OTEL_TRACES_EXPORTER=otlpstdout\`" >> release_notes.md
          else
            echo "Add this layer to your Lambda function and set:" >> release_notes.md
            echo "- \`AWS_LAMBDA_EXEC_WRAPPER=/opt/otel-handler\`" >> release_notes.md
            echo "- \`OTEL_TRACES_EXPORTER=otlpstdout\`" >> release_notes.md
          fi
          
          echo "" >> release_notes.md
          echo "### Details" >> release_notes.md
          echo "" >> release_notes.md
          echo "- **Upstream OpenTelemetry**: ${{ needs.build-layers.outputs.UPSTREAM_VERSION }}" >> release_notes.md
          echo "- **OTLP Stdout Exporter**: ${{ needs.build-layers.outputs.EXPORTER_VERSION }}" >> release_notes.md
          echo "- **Release Group**: ${{ github.event.inputs.release-group }}" >> release_notes.md

      - name: Create GitHub Release
        run: |
          gh release create "${{ steps.release-tag.outputs.release-tag }}" \
            --title "OTLP Stdout ${{ github.event.inputs.language }} Layer ${{ needs.build-layers.outputs.UPSTREAM_VERSION }}" \
            --notes-file release_notes.md \
            --draft=false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}