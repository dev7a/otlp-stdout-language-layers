diff --git a/nodejs/packages/layer/src/wrapper.ts b/nodejs/packages/layer/src/wrapper.ts
index 9953988..a632547 100644
--- a/nodejs/packages/layer/src/wrapper.ts
+++ b/nodejs/packages/layer/src/wrapper.ts
@@ -83,6 +83,10 @@ declare global {
     defaultSdkRegistration: SDKRegistrationConfig,
   ): SDKRegistrationConfig;
   function configureTracer(defaultConfig: TracerConfig): TracerConfig;
+  function configureExporters(
+    exporters: SpanExporter[],
+    exporterNames: string[],
+  ): SpanExporter[];
 
   // No explicit metric type here, but "unknown" type.
   // Because metric packages are important dynamically.
@@ -369,10 +373,16 @@ function getExportersFromEnv(): SpanExporter[] | null {
   const stringToExporter = new Map<string, () => SpanExporter>([
     ['otlp', () => new OTLPTraceExporter()],
     ['console', () => new ConsoleSpanExporter()],
+    ['otlpstdout', () => {
+      const { OTLPStdoutSpanExporter } = require('@dev7a/otlp-stdout-span-exporter');
+      return new OTLPStdoutSpanExporter();
+    }],
   ]);
   const exporters: SpanExporter[] = [];
+  const exporterNames: string[] = [];
   process.env.OTEL_TRACES_EXPORTER.split(',').map(exporterName => {
     exporterName = exporterName.toLowerCase().trim();
+    exporterNames.push(exporterName);
     const exporter = stringToExporter.get(exporterName);
     if (exporter) {
       exporters.push(exporter());
@@ -382,6 +392,12 @@ function getExportersFromEnv(): SpanExporter[] | null {
       );
     }
   });
+
+  // Allow downstream to configure exporters (for backward compatibility)
+  if (typeof configureExporters === 'function') {
+    return configureExporters(exporters, exporterNames);
+  }
+
   return exporters;
 }
 
